# If Parameter Store setup fails, use the teacherâ€™s Secret as a fallback (in prod namespace).
# SecretProviderClass to sync Parameter Store to a Kubernetes Secret and pod files
apiVersion: secrets-store.csi.x-k8s.io/v1
kind: SecretProviderClass
metadata:
  name: devops-learning-secrets   # Name of the SecretProviderClass, referenced by pods
  namespace: prod   # Namespace where the backend and job run
spec:
  provider: aws     # Use AWS as the secret provider (via ASCP)  
  parameters:       # Defines which Parameter Store parameters to fetch
    objects: |      # List of AWS objects (parameters) to retrieve
      - objectName: "/devops-learning/db-username"
        objectType: "ssmparameter"
        objectAlias: DB_USERNAME
      - objectName: "/devops-learning/db-password"
        objectType: "ssmparameter"
        objectAlias: DB_PASSWORD
      - objectName: "/devops-learning/db-name"
        objectType: "ssmparameter"
        objectAlias: DB_NAME
      - objectName: "/devops-learning/secret-key"
        objectType: "ssmparameter"
        objectAlias: SECRET_KEY
      - objectName: "/devops-learning/rds-endpoint"
        objectType: "ssmparameter"
        objectAlias: RDS_ENDPOINT
  secretObjects:    # Create a Kubernetes Secret from the fetched parameters
  - secretName: devops-learning-secrets # Name of secret to create
    type: Opaque    # Secret type (generic key-value pairs)
    data:           # Map Parameter Store parameters to Secret keys
    - objectName: DB_USERNAME
      key: DB_USERNAME  # Key in secret
    - objectName: DB_PASSWORD
      key: DB_PASSWORD
    - objectName: DB_NAME
      key: DB_NAME
    - objectName: SECRET_KEY
      key: SECRET_KEY
    - objectName: RDS_ENDPOINT
      key: RDS_ENDPOINT