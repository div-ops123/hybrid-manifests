apiVersion: apps/v1
kind: Deployment
metadata:
  name: youtube-app
  namespace: prod

# Desired sate of cluster
spec:
  # App instances you want runing at all times
  replicas: 2
  # How Kubernetes would identify the app it's managinf for this deployment
  selector:
    matchLabels:
      app: youtube-app
  # Template for creating new pods
  template:
    metadata:
      # Kubernetes creates new pods matching this label
      labels:
        app: youtube-app
    spec:
      # Containers to be run in a pod
      containers:
      - # Name of container within the pod
        name: youtube-app
        image: devopsdee/youtube-app:v1.0.0
        ports: 
        # Must match Dockerfile
        - containerPort: 80
        env:
        # Must macth secret
        - name: REACT_APP_RAPID_API_KEY
          valueFrom:
            secretKeyRef:
              name: youtube-api-key
              key: REACT_APP_RAPID_API_KEY

        # specifies the compute resource requirements for your container
        resources:
          # Ensures the pod is scheduled on a node with sufficient CPU and memory available.
          requests:
            # pods get at least 0.1 CPU and 64 MiB of memory
            cpu: "50m"      # 50 milliCPU (0.05 CPU core)
            memory: "64Mi"
          limits:
            # container is restricted to 0.1 CPU and 100 MiB, ensuring it doesn’t overload the node
            cpu: "100m"
            memory: "100Mi"

        # Health checks        
        livenessProbe:              # Periodically check if the container is running correctly          
          httpGet:                  # Sends HTTP GET request to pod to Checks if NGINX serves the app
            path: /
            port: 80
          initialDelaySeconds: 15   # Wait seconds before the first check
          periodSeconds: 10         # Checks every n seconds
          timeoutSeconds: 3         # Timeout after n seconds
          failureThreshold: 3       # Fail after n consecutive failures, and auto restart container
        
        readinessProbe:             # Ensures only healthy pods receive traffic
          httpGet:                  # Periodically Check if the app is ready to serve traffic
            path: /
            port: 80
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3       # If the probe fails, Kubernetes removes the pod from the Service’s load-balancing pool until it’s ready again

        # Command to run the container is specifed in Dockerfile
